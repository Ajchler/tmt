story: As a user I want to have an intuitive command line interface

/run:
    story: 'As a user I want to execute tests easily'

    /default:
        story: 'Default should cover the most common use case'
        description:
            Run all relevant tests on the default environment.
            Default environment should be something safe which
            should not modify user environment. Perhaps something
            like 'x86_64 virtual machine from the testing farm'?
        examples: tmt run

    /discover:
        story: 'Select or adjust the discover step'
        description:
            Defines which tests should be executed.
        examples:
            - tmt run discover
            - tmt run discover --how=fmf
            - tmt run discover --how=fmf --repo=url
            - tmt run discover --how=list
            - tmt run discover --how=shell
            - tmt run discover --how=nitrate

    /provision:
        story: 'Select or adjust the provision step'
        description:
            Describes what environment is needed for testing and
            how it should provisioned.
        examples:
            - tmt run provision
            - tmt run provision --how=testing-farm
            - tmt run provision --how=testing-farm --memory-min=8GB
            - tmt run provision --how=openstack
            - tmt run provision --how=container
            - tmt run provision --how=podman
            - tmt run provision --how=docker
            - tmt run provision --how=podman --image=fedora:rawhide
            - tmt run provision --how=beaker --distro=rhel-8
            - tmt run provision --how=beaker --arch=s390x
            - tmt run provision --how=local
            - tmt run provision --how=qemu
            - tmt run provision --how=vagrant

    /prepare:
        story: 'Select or adjust the prepare step'
        description:
            Additional configuration of the provisioned
            environment needed for testing.
        examples:
            - tmt run prepare
            - tmt run prepare --how=ansible
            - tmt run prepare --how=ansible --playbook=server.yaml

    /execute:
        story: 'Select or adjust the execute step'
        description:
            Specification of the testing framework which should
            execute tests.
        examples:
            - tmt run execute
            - tmt run execute --how=shell
            - tmt run execute --how=beakerlib
            - tmt run execute --how=restraint

    /report:
        story: 'Select or adjust the report step'
        description:
            Adjusting notifications about the test progress and
            results.
        examples:
            - tmt run report
            - tmt run report --email=email@example.com
            - tmt run report --irc=room

    /finish:
        story: 'Select or adjust the finish step'
        description:
            Additional actions to be performed after the test
            execution has been completed. Counterpart of the
            prepare step useful for various cleanup actions.
        examples:
            - tmt run finish

    /select-steps:
        story: 'Select multiple steps to be executed'

        /pick:
            story: 'Choose steps to be executed'
            examples:
                - tmt run provision prepare
                - tmt run discover provision prepare
            implemented: /tmt/cli
        /until:
            story: 'Run all steps until the given one'
            examples:
                - tmt run --until prepare
                - tmt run --until execute
        /all:
            story: 'Run all test steps, customize some'
            examples:
                - tmt run --all provision --how=container
            implemented: /tmt/cli

    /interactive:
        story: 'Provide way similar to git rebase --interactive'
        description:
            Provide users with list of steps and let them edit them.
            Allow adding commands between, or at least interactive "pause".
            When user would be finished with single step, just continue recipe.
            Do not force users to remember all steps when working with them.
            Make it possible to repeat single step or abort current run.
            Allow repeating some steps just by repeating lines with task.
        examples:
            - tmt run --all --interactive
            - tmt run --continue
            - tmt run --abort

    /shortcuts:
        story: 'Provide shortcuts for common scenarios'
        /container:
            examples:
                - tmt run --container=fedora:rawhide
                - tmt run --container=fedora:rawhide --cap-add=SYS_ADMIN
        /mock:
            examples:
                - tmt --mock fedora-31-x86_64
                - tmt --mock fedora-31-x86_64 --no-clean --enable-network
                - tmt --mock fedora-31-x86_64 --enablerepo=updates-testing

    /filter-plan:
        story: 'Select plans for execution'
        examples:
            - tmt run plan NAME
            - tmt run plan --filter=FILTER
            - tmt run plan --grep=REGEXP

    /filter-test:
        story: 'Select tests for execution'
        # TODO: Should this be rather covered by the discover step?
        examples:
            - tmt run test NAME
            - tmt run test --filter=FILTER
            - tmt run test --grep=REGEXP
            - tmt run plan NAME2 test NAME1

    /keep:
        story: Store test step status, keep machines running
        examples:
            - tmt run --keep provision prepare
            - tmt run --keep discover execute
            - tmt run --keep execute
            - tmt run --keep execute

    /debug:
        summary: Handsfree debugging
        story:
            As a test developer I want to automatically execute
            tests upon saving the updated test code to disk.
        examples: tmt run debug

/test:
    story: 'As a user I want to comfortably work with tests'

    /ls:
        story: 'List available tests'
        examples: tmt test ls
        implemented: /tmt/cli
        tested: /tests/ls

    /show:
        story: 'Show test metadata'
        examples: tmt test show
        implemented: /tmt/cli

    /lint:
        story: 'Check test against the L1 metadata specification'
        description:
            Verify that test metadata are aligned with the
            specification, e.g. that all required attributes are
            present and that all attributes have correct type.
        examples: tmt test lint
        implemented: /tmt/cli

    /create:
        story: 'Create a new test skeleton'
        description:
            Provide an easy way how to create a new test. Ideally
            with support for multiple test skeletons. Similarly as
            beaker-wizard (which should be obsoleted by this) the
            tool should prompt for required values if not provided
            on the command line.
        examples:
            - tmt test create
            - tmt test create /tests/area/feature
            - tmt test create /tests/area/feature --skeleton beakerlib
            - tmt test create /tests/area/feature --duration=1h
        implemented: /tmt/cli

    /convert:
        story: 'Convert old test metadata'
        examples: tmt test convert
        implemented: /tmt/convert
        tested: /tests/test_convert
        documented: /docs/commands#test

    /coverage:
        story: 'Test coverage overview'
        description:
            Show current status of test coverage.
            Alias for /stories/cli/story/coverage/test
        examples: tmt test coverage

    /filter:
        story: 'Filter available tests'
        examples:
            - tmt test ls REGEXP
            - tmt test ls --max-duration=5m
            - tmt test ls --enabled
            - tmt test ls --tier=1

/plan:
    story: 'As a user I want to comfortably work with plans'

    /ls:
        story: 'List available plans'
        examples: tmt plan ls
        implemented: /tmt/cli
        tested: /tests/ls

    /show:
        story: 'Show plan configuration'
        examples: tmt plan show
        implemented: /tmt/cli

    /filter:
        story: 'Filter available plans'
        examples:
            - tmt plan ls REGEXP
            - tmt plan show --artifact=pull-request

    /lint:
        story: 'Check plan against the L2 metadata specification'
        description:
            Verify that plan metadata are aligned with the
            specification, e.g. that all required attributes are
            present and that all attributes have correct type.
        examples: tmt plan lint
        implemented: /tmt/cli

    /create:
        story: 'As a developer I want to easily enable CI'
        description:
            Provide a super-easy and user-friendly way how to
            enable tests in the CI. Several templates should be
            supported to cover common use cases.
        examples:
            - tmt plan create /plans/smoke --template=mini
            - tmt plan create /plans/features --template=full
        implemented: /tmt/cli

/story:
    story: 'As a developer I want to comfortably work with stories'

    /ls:
        story: 'List available stories'
        examples: tmt story ls
        implemented: /tmt/cli
        tested: /tests/ls

    /show:
        story: 'Show story details'
        examples: tmt story show
        implemented: /tmt/cli

    /filter:
        story: 'Search available stories'
        examples:
            - tmt story --implemented
            - tmt story --unimplemented
            - tmt story --tested
            - tmt story --untested
            - tmt story --documented
            - tmt story --undocumented
        implemented: /tmt/cli

    /create:
        story: 'As a developer I want to easily create new story.'
        description:
            Provide an easy way how to create a new story.
            Several templates should be provided to choose from.
        examples:
            - tmt story create /stories/area/story
            - tmt story create /stories/area/story --template mini
            - tmt story create /stories/area/story --template mini --force
        implemented: /tmt/cli

    /coverage:
        summary: 'Show story coverage'
        story:
            As a developer I want to easily view which stories
            have been implemented, are covered by tests and
            documented and which still need work to be done.
        implemented: /tmt/cli

        /overview:
            summary: 'General coverage overview'
            description:
                Complete overview of the story coverage including
                implementation, testing and documentation status.
            examples: tmt story coverage

        /code:
            summary: 'View code implementation status'
            examples:
                - tmt story coverage -c
                - tmt story coverage --code

        /test:
            summary: 'View test coverage status'
            examples:
                - tmt story coverage -t
                - tmt story coverage --test

        /docs:
            summary: 'View documentation status'
            examples:
                - tmt story coverage -d
                - tmt story coverage --docs

    /export:
        story: 'I need to convert stories into a beautiful format'

        /rst:
            story: 'Export stories into reStructuredText'
            description:
                So that they can be included in tmt documentation.
            examples: tmt story export --rst
            implemented:
                - /tmt/cli
                - /tmt/base

        /html:
            story: 'Export stories into html'
            description:
                So that they can be quickly reviewed in a web
                browser. Optionally a simple python httpd server
                could be started to serve the page or pages.
            examples: tmt story export --html --server

/init:
    story: As a user I want to start using tmt in my git repository.
    summary: Initialize a new metadata tree
    examples: tmt init
    implemented: /tmt/cli

/usability:
    story:
        As a user I want to type as little as possible.

    /abbreviation:

        /commands:
            summary: Allow command abbreviation
            examples:
                - tmt story show
                - tmt st sh
                - tmt s s
            implemented: /tmt/cli

        /options:
            summary: Allow option abbreviation
            examples:
                - tmt story ls --implemented
                - tmt story ls --impl
                - tmt story ls --i

    /completion:
        summary: Support bash completion
        examples: tmt st<tabl> sh<tab>

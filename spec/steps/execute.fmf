summary: Define how tests should be executed

description: |
    Execute discovered tests on provisioned boxes using provided
    test framework with optional support for parallelization. By
    default tests are executed as ``shell`` scripts. This is a
    **required** attribute. Each plan has to define this step.

    For each ``plan`` the execute step should produce a
    ``results.yaml`` file with the list of results for each test
    in the following format::

        /test/one:
            result: OUTCOME
            log: PATH

        /test/two:
            result: OUTCOME
            log: PATH
            duration: DURATION


    Where ``OUTCOME`` is the result of the test execution. It can
    have the following values:

        pass
            Test execution successfully finished and passed.
        info
            Test finished but only produced an informational
            message. Represents a soft pass, used for skipped
            tests and for tests with the :ref:`/spec/tests/result`
            attribute set to *ignore*. Automation should treat
            this as a passed test.
        warn
            A problem appeared during test execution which does
            not affect test results but might be worth checking
            and fixing. For example test cleanup phase failed.
            Automation should treat this as a failed test.
        error
            Undefined problem encountered during test execution.
            Human inspection is needed to investigate whether it
            was a test bug, infrastructure error or a real test
            failure. Automation should treat it as a failed test.
        fail
            Test execution successfully finished and failed.

    The ``PATH`` is the test log output path, relative to the
    execute step working directory. It can be a single string
    or a list of strings when multiple log files available, in
    which case the first log will be considered as the main one
    (e.g. presented to the user for inspection).

    The ``DURATION`` is an optional section stating how long did
    the test run. Its value is in the ``hh:mm:ss`` format.

/isolate:
    summary: Run tests in an isolated environment
    description:
        Optional boolean attribute `isolate` can be used to
        request a clean test environment for each test.
    example: |
        execute:
            how: beakerlib
            isolate: true

/shell:
    story: As a user I want to easily run shell script as a test.
    summary: Execute shell scripts
    description:
        Execute arbitratry shell commands and check their exit
        code which is used as a test result. This is the default
        execute step implementation.

        The default :ref:`/spec/tests/duration` for tests defined
        directly under the execute step is ``1h``. Use the
        ``duration`` attribute to modify the default limit.

    example: |
        execute:
            how: shell
            script: tmt --help

        execute:
            how: shell
            script: a-long-test-suite
            duration: 3h

    /default:
        summary: Shell is the default executor
        description: |
            The `shell` implementation is the default one.  Thus
            you can omit the `how` keyword and just define the
            `script` to be run.  This is how a minimal smoke test
            for the `tmt` command line can look like:
        example: |
            execute:
                script: tmt --help
        implemented: /tmt/steps/execute/shell.py

    /multi:
        summary: Multiple shell commands
        description:
            You can also include several commands as a list.
            Executor will run commands one-by-one and check exit
            code of each.
        example: |
            execute:
                script:
                    - dnf -y install httpd curl
                    - systemctl start httpd
                    - echo foo > /var/www/html/index.html
                    - curl http://localhost/ | grep foo
        implemented: /tmt/steps/execute/shell.py

    /script:
        summary: Multi-line shell script
        description:
            Providing a multi-line shell script is also
            supported. In that case executor will store given
            script into a file and execute.
        example: |
            execute:
                script: |
                    dnf -y install httpd curl
                    systemctl start httpd
                    echo foo > /var/www/html/index.html
                    curl http://localhost/ | grep foo

/beakerlib:
    story: As a user I want to easily run beakerlib tests.
    summary: Execute beakerlib tests
    description:
        Run tests using the beakerlib shell-level integration
        testing library. Check the exit code to ensure tests have
        been executed successfully and the journal for test
        results.
    implemented: /tmt/steps/execute/beakerlib.py

    example: |
        execute:
            how: beakerlib
